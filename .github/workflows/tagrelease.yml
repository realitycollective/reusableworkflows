name: Package UPM project and deploy

on:
  workflow_call:
    inputs:
      build-target:
        required: true
        type: string
    outputs:
      packageversion:
        description: "Returns the version of Unity the UPM package requires"
        value: ${{ jobs.packageRelease.outputs.packageversion }}
    secrets:
      GIT_USER_NAME: 
        required: false
      GIT_PAT:
        required: true

jobs:
  packageRelease:
    name: Package UPM Project and tag
    runs-on: ${{ inputs.build-target }}
    outputs:
      packageversion: ${{ steps.getpackageversion.outputs.packageversion }}    
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive
          clean: true
          token: ${{ secrets.GIT_PAT }}          
      - uses: actions/setup-node@v2
      - name: Set Github vars
        run: |
          echo "::group::Script Versioning"
            $scriptVersion = '1.0.1'

            echo 'Build Script Version'
            echo $scriptVersion
          echo "::endgroup::"

          if([string]::IsNullOrEmpty('${{ secrets.GIT_USER_NAME }}')){
            if([string]::IsNullOrEmpty('${{ secrets.GIT_USER_NAME }}')){
              $gitUser = "action"
              $gitEmail = "action@github.com"
            }
            else {
              $gitUser = "${GITHUB_ACTOR}"
              $gitEmail = "$gitUser@users.noreply.github.com"
            }
          }
          else {
            $gitUser = "${{ secrets.GIT_USER_NAME }}"
            $gitEmail = "$gitUser@users.noreply.github.com"
          }
          echo "email $gitUser@users.noreply.github.com"
          git config --global user.email "$gitUser@users.noreply.github.com"
          git config --global user.name "$gitUser"
        shell: pwsh
      - name: Create Tag Release
        run: |
          npm config set git-tag-version true
          $result = npm version prerelease -m "Auto increment pre-release version to %s [skip ci]" --force
          if([string]::IsNullOrEmpty($result)) {
            echo "NPM Version patch failed"
            exit 1
          }          
          echo "Package Version is $result"
          echo "::set-output name=packageversion::$result"
          git tag -fa "${{ steps.getpackageversion.outputs.packageversion }}" "${GITHUB_SHA}" -m "${{ steps.getpackageversion.outputs.packageversion }}"
          git push origin "${{ steps.getpackageversion.outputs.packageversion }}"
        shell: pwsh